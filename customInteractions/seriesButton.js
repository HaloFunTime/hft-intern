const { EmbedBuilder } = require("discord.js");
const axios = require("axios");
const { HALOFUNTIME_API_KEY, HALOFUNTIME_API_URL } = process.env;

module.exports = {
  name: "seriesButton",
  async process(interaction) {
    if (!interaction.isButton()) return;
    if (!interaction.customId.startsWith("seriesButton")) return;
    const seriesIdAndEndpoint = interaction.customId.split(":")[2];
    const seriesLength = parseInt(
      seriesIdAndEndpoint.charAt(seriesIdAndEndpoint.length - 1)
    );
    const series = await axios
      .get(`${HALOFUNTIME_API_URL}/series/${seriesIdAndEndpoint}`, {
        headers: {
          Authorization: `Bearer ${HALOFUNTIME_API_KEY}`,
        },
      })
      .then((response) => response.data)
      .catch(async (error) => {
        // Return the error payload directly if present
        if (error.response.data) {
          return error.response.data;
        }
        console.error(error);
      });
    // End the interaction early if error data is present
    if ("error" in series) {
      const errorEmbed = new EmbedBuilder()
        .setColor(0xe91e63)
        .setTitle("Error")
        .setDescription(series.error)
        .setThumbnail("https://api.halofuntime.com/static/HFTLogo.png")
        .setTimestamp()
        .setFooter({
          text: "Generated by HaloFunTime",
          iconURL: "https://api.halofuntime.com/static/HFTLogo.png",
        });
      await interaction.update({
        content: "",
        components: [],
        embeds: [errorEmbed],
      });
      return;
    }
    // Build the embed payload showing the full series
    const generateMapUrl = (mapFileId) =>
      `https://www.halowaypoint.com/halo-infinite/ugc/maps/${mapFileId}`;
    const generateModeUrl = (modeFileId) =>
      `https://www.halowaypoint.com/halo-infinite/ugc/modes/${modeFileId}`;
    const fields = [];
    for (let i = 1; i <= seriesLength; i++) {
      const game = series[`game${i}`];
      const modeString = !game.modeFileId
        ? game.mode
        : `[${game.mode}](${generateModeUrl(game.modeFileId)})`;
      const mapString = !game.mapFileId
        ? game.map
        : `[${game.map}](${generateMapUrl(game.mapFileId)})`;
      const gameDescription = `${modeString} on ${mapString}`;
      fields.push({
        name: `Game ${i}`,
        value: gameDescription,
      });
    }
    const seriesEmbed = new EmbedBuilder()
      .setColor(0x3498db)
      .setTitle(series.title)
      .setDescription(series.subtitle)
      .setThumbnail("https://api.halofuntime.com/static/HFTLogo.png")
      .addFields(fields)
      .setTimestamp()
      .setFooter({
        text: "Generated by HaloFunTime",
        iconURL: "https://api.halofuntime.com/static/HFTLogo.png",
      });
    await interaction.update({
      content: "",
      components: [],
      embeds: [seriesEmbed],
    });
  },
};
